/****************************************************************************
**
** Copyright (c) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of Qt Creator
**
**
** GNU Free Documentation License
**
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!

    \contentspage {Qt Creator Manual}
    \previouspage creator-design-mode.html
    \page creator-visual-editor.html
    \nextpage quick-projects.html

    \title Developing Qt Quick Applications

    \list

        \li \l {Creating Qt Quick Projects}

            You can use wizards to create Qt Quick projects.
        \li \l {Using Qt Quick Designer}

            You can use the code editor (Edit mode) or the visual editor (Design
            mode) to develop Qt Quick applications.

        \li \l {Creating Components}

            You can use predefined QML types to create components or use a set
            of Qt Quick Controls for creating classic desktop-style user
            interfaces using Qt Quick 2.1 (available since Qt 5.1).
        \li \l {Creating Screens}

            You can use predefined QML types, Qt Quick Controls, and your own
            components to create screens. You can use states and transitions to
            navigate between screens.
        \li \l {Exporting Designs from Graphics Software}

            You can export designs from graphics software, such as Adobe
            Photoshop and GIMP, to QML files. You can then edit QML files in
            \QC.
        \li \l {Using QML Modules with Plugins}

            QML modules may use plugins to expose components defined in C++ to
            QML applications. \QC cannot load the plugins to determine the
            details of the contained components, and therefore, the modules must
            provide extra type information for code completion and the semantic
            checks to work correctly.

    \endlist

*/
